[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[sub_resource type="SpatialMaterial" id=2]

render_priority = 127
flags_transparent = false
flags_unshaded = false
flags_vertex_lighting = false
flags_no_depth_test = false
flags_use_point_size = false
flags_world_triplanar = false
flags_fixed_size = false
flags_albedo_tex_force_srgb = false
flags_do_not_receive_shadows = false
flags_disable_ambient_light = false
flags_ensure_correct_normals = false
vertex_color_use_as_albedo = false
vertex_color_is_srgb = false
params_diffuse_mode = 0
params_specular_mode = 0
params_blend_mode = 0
params_cull_mode = 0
params_depth_draw_mode = 0
params_line_width = 1.0
params_point_size = 1.0
params_billboard_mode = 0
params_billboard_keep_scale = false
params_grow = false
params_use_alpha_scissor = false
albedo_color = Color( 1, 1, 1, 1 )
metallic = 0.0
metallic_specular = 0.5
metallic_texture_channel = 0
roughness = 1.0
roughness_texture_channel = 0
emission_enabled = false
normal_enabled = false
rim_enabled = false
clearcoat_enabled = false
anisotropy_enabled = false
ao_enabled = false
depth_enabled = false
subsurf_scatter_enabled = false
transmission_enabled = false
refraction_enabled = false
detail_enabled = false
uv1_scale = Vector3( 1, 1, 1 )
uv1_offset = Vector3( 0, 0, 0 )
uv1_triplanar = false
uv1_triplanar_sharpness = 1.0
uv2_scale = Vector3( 1, 1, 1 )
uv2_offset = Vector3( 0, 0, 0 )
uv2_triplanar = false
uv2_triplanar_sharpness = 1.0
proximity_fade_enable = false
distance_fade_mode = 0

[sub_resource type="Shader" id=1]

code = "shader_type spatial;

render_mode depth_test_disable, skip_vertex_transform, unshaded;

void vertex() {
	
	
	
	//MODELVIEW_MATRIX = MODELVIEW_MATRIX * 0.9;
	//VERTEX.y = 0.0;
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;
	//float distToCamera = -VERTEX.z;
	//VERTEX = PROJECTION_MATRIX * sition
	//VERTEX.z *= 6.1;
	
}

void fragment() {
	
	float zdepth = texture(DEPTH_TEXTURE, SCREEN_UV).r;
    float zpos = FRAGCOORD.z;
	
	if (zdepth < zpos) {	
	
		//if ((int((FRAGCOORD.x) * 0.2) % 2 == 0 && int((FRAGCOORD.y) * 0.2) % 2 == 0)) {
		
		ALBEDO = vec3(10,0,0);
		//} else {
		//	discard;	
		//}
	
	} else {
		discard;
	}
	
	/*if ((int((FRAGCOORD.x) * 0.2) % 2 == 0 && int((FRAGCOORD.y) * 0.2) % 2 == 0)) {
		float zdepth = max(0.0, texture(DEPTH_TEXTURE, SCREEN_UV).r);
	    float zpos = max(0.0, FRAGCOORD.z);
		
		if (zdepth - zpos < 0.0) {	
			ALBEDO = vec3(10,0,0);
		} else {
			discard;	
		}
	
	} else {
		
	}*/
}"

[resource]

render_priority = -88
next_pass = SubResource( 2 )
shader = SubResource( 1 )
_sections_unfolded = [ "shader" ]

